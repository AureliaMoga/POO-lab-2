a)
#include <iostream>
#include <string>
#include <ctime>

class SoftFile {
private:
    std::string fileName;   // Numele complet al fișierului
    std::string fileExtension;  // Anexa de asociere
    time_t creationTime;  // Data și timpul creării

public:
    SoftFile() {
        fileName = "";
        fileExtension = "";
        creationTime = time(0);  // Obține data și timpul curent
    }

    SoftFile(const std::string& fileName, const std::string& fileExtension) {
        this->fileName = fileName;
        this->fileExtension = fileExtension;
        creationTime = time(0);  // Obține data și timpul curent
    }

    SoftFile(const std::string& fileName) {
        this->fileName = fileName;
        // Extrage anexa de asociere din nume (ultima parte după punct)
        size_t dotPos = fileName.find_last_of(".");
        if (dotPos != std::string::npos) {
            this->fileExtension = fileName.substr(dotPos + 1);
        } else {
            this->fileExtension = "";
        }
        creationTime = time(0);  // Obține data și timpul curent
    }

    void renameFile(const std::string& newFileName) {
        fileName = newFileName;
    }

    void moveFileToDirectory(const std::string& newDirectory) {
        std::cout << "Fișierul '" << fileName << "' a fost transferat în directorul '" << newDirectory << "'." << std::endl;
    }

    void changeFileExtension(const std::string& newExtension) {
        fileExtension = newExtension;
    }

    std::string getFileName() const {
        return fileName;
    }

    std::string getFileExtension() const {
        return fileExtension;
    }
};

int main() {
    SoftFile myFile("document.doc");
    
    std::cout << "Numele fișierului: " << myFile.getFileName() << std::endl;
    std::cout << "Anexa de asociere: " << myFile.getFileExtension() << std::endl;

    myFile.renameFile("new_document.doc");
    std::cout << "Noul nume al fișierului: " << myFile.getFileName() << std::endl;

    myFile.moveFileToDirectory("/path/to/new/directory");
    
    myFile.changeFileExtension("pdf");
    std::cout << "Noua anexă de asociere: " << myFile.getFileExtension() << std::endl;

    return 0;
}


b)#include <iostream>
#include <stdexcept>

class Matrix {
private:
    long* data;      // Pointer către elementele matricei
    int numRows;     // Numărul de rânduri
    int numCols;     // Numărul de coloane
    int errorCode;   // Codul erorii

public:
    Matrix() : data(nullptr), numRows(0), numCols(0), errorCode(0) {}

    Matrix(int size) : data(nullptr), numRows(size), numCols(size), errorCode(0) {
        initializeMatrix();
    }

    Matrix(int rows, int cols) : data(nullptr), numRows(rows), numCols(cols), errorCode(0) {
        initializeMatrix();
    }

    ~Matrix() {
        delete[] data;
    }

    long& at(int i, int j) {
        if (i < 0 || i >= numRows || j < 0 || j >= numCols) {
            errorCode = 1; // Cod de eroare pentru depășirea limitelor matricei
            throw std::out_of_range("Index out of range.");
        }
        return data[i * numCols + j];
    }

    long at(int i, int j) const {
        if (i < 0 || i >= numRows || j < 0 || j >= numCols) {
            throw std::out_of_range("Index out of range.");
        }
        return data[i * numCols + j];
    }

    Matrix operator+(const Matrix& other) {
        if (numRows != other.numRows || numCols != other.numCols) {
            errorCode = 2; // Cod de eroare pentru dimensiuni incompatibile
            throw std::invalid_argument("Matrix dimensions are not compatible for addition.");
        }

        Matrix result(numRows, numCols);

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                result.data[i * numCols + j] = data[i * numCols + j] + other.data[i * numCols + j];
            }
        }

        return result;
    }

    void set(int i, int j, long value) {
        if (i < 0 || i >= numRows || j < 0 || j >= numCols) {
            errorCode = 1; // Cod de eroare pentru depășirea limitelor matricei
            throw std::out_of_range("Index out of range.");
        }
        data[i * numCols + j] = value;
    }

    int getRows() const {
        return numRows;
    }

    // Funcție pentru a obține numărul de coloane
    int getCols() const {
        return numCols;
    }

    // Funcție pentru a obține codul erorii
    int getErrorCode() const {
        return errorCode;
    }

private:
    void initializeMatrix() {
        data = new long[numRows * numCols]();
    }
};

Matrix readMatrixFromUser() {
    int rows, cols;
    std::cout << "Introduceti numarul de randuri: ";
    std::cin >> rows;
    std::cout << "Introduceti numarul de coloane: ";
    std::cin >> cols;

    Matrix matrix(rows, cols);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            std::cout << "Introduceti elementul de pe pozitia (" << i << ", " << j << "): ";
            long value;
            std::cin >> value;
            matrix.set(i, j, value);
        }
    }

    return matrix;
}

void printMatrix(const Matrix& matrix) {
    int rows = matrix.getRows();
    int cols = matrix.getCols();

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            std::cout << matrix.at(i, j) << " ";
        }
        std::cout << std::endl;
    }
}

int main() {
    Matrix mat1 = readMatrixFromUser();
    Matrix mat2 = readMatrixFromUser();

    Matrix result = mat1 + mat2;

    std::cout << "Rezultatul adunarii matricilor:" << std::endl;
    printMatrix(result);

    return 0;
}
